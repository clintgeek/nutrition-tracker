# Build stage
FROM node:18-alpine as build

# Install bash and symlink for compatibility
RUN apk add --no-cache bash && \
    ln -sf /bin/bash /usr/bin/bash && \
    ln -sf /bin/bash /bin/sh

# Set working directory
WORKDIR /app

# Add npmrc with more aggressive settings
RUN echo "registry=http://registry.npmjs.org/" > ~/.npmrc && \
    echo "strict-ssl=false" >> ~/.npmrc && \
    echo "loglevel=verbose" >> ~/.npmrc && \
    echo "fetch-retries=5" >> ~/.npmrc && \
    echo "fetch-retry-factor=2" >> ~/.npmrc && \
    echo "fetch-retry-mintimeout=20000" >> ~/.npmrc && \
    echo "fetch-retry-maxtimeout=120000" >> ~/.npmrc

# Copy package.json and package-lock.json
COPY package*.json ./

# Configure npm and clean cache
RUN npm config set registry=http://registry.npmjs.org/ && \
    npm config set strict-ssl=false && \
    npm cache clean --force

# Debug: check bash presence before npm install
RUN ls -l /bin/bash /usr/bin/bash /bin/sh && bash --version

# Install dependencies with additional workarounds
RUN npm install --legacy-peer-deps --no-audit --no-fund --network-timeout=100000

# Copy the rest of the app
COPY . .

# Build the web app
RUN npx expo export:web

# Production stage
FROM nginx:alpine

# Copy the built web app from the build stage
COPY --from=build /app/web-build /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Expose port 80
EXPOSE 80

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]
